#+Title:  Hackable Emacs distro
#+Author: I
#+Date: 2023
#+Startup: show2levels

Welcome! This is a hackable Emacs distro

* General Notes:
- Normally, we need to add ~:ensure t~ to tell ~use-package~ to download packages when it's not available. Since we've added ~use-package-always-ensure~ in ~init.el~, we can omit it.

* Settings without corresponding packages
** Clean up the UI.
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :preface
    (defvar ehackable/indent-width 4) ; change this value to your preferred width
    :config
    (setq frame-title-format '("Emacs") ;
          ring-bell-function 'ignore       ; minimize distraction
          frame-resize-pixelwise t
          default-directory "~/")

    (tool-bar-mode -1)
    (menu-bar-mode -1)

    ;; better scrolling experience
    (setq scroll-margin 0
          scroll-conservatively 101 ; > 100
          scroll-preserve-screen-position t
          auto-window-vscroll nil)

    ;; Always use spaces for indentation
    (setq-default indent-tabs-mode nil
                  tab-width ehackable/indent-width)

    ;; Omit default startup screen
    (setq inhibit-startup-screen t))

  (use-package emacs
    :ensure nil
    :preface
    (defun ehackable/split-and-follow-horizontally ()
      "Split window below."
      (interactive)
      (split-window-below)
      (other-window 1))
    (defun ehackable/split-and-follow-vertically ()
      "Split window right."
      (interactive)
      (split-window-right)
      (other-window 1))
    (defun ehackable/custom-split-windows ()
      "Custom split of windows."
      (interactive)
      (ehackable/split-and-follow-horizontally)
      (ehackable/split-and-follow-vertically))
    :config
    (global-set-key (kbd "C-x 2") #'ehackable/split-and-follow-horizontally)
    (global-set-key (kbd "C-x 3") #'ehackable/split-and-follow-vertically)
    (global-set-key [M-left] 'windmove-left)          ; move to left window
    (global-set-key [M-right] 'windmove-right)        ; move to right window
    (global-set-key [M-up] 'windmove-up)              ; move to upper window
    (global-set-key [M-down] 'windmove-down))         ; move to lower window

#+END_SRC

* Configuration for built-in packages
** Modernize selection behavior
Replace the active region just by typing text, just like modern
editors.
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :ensure nil
    :config (delete-selection-mode +1))
#+END_SRC
** Disable scroll-bar
#+BEGIN_SRC emacs-lisp
  (use-package scroll-bar
    :ensure nil
    :config (scroll-bar-mode -1))
#+END_SRC
** Enable column numbers
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :ensure nil
    :config (column-number-mode +1))
#+END_SRC
** File-related tweaks
Don't bother confirming killing processes and don't let backup~ files
scatter around.
#+BEGIN_SRC emacs-lisp
  (use-package files
    :ensure nil
    :config
    (setq confirm-kill-processes nil
          create-lockfiles nil ; don't create .# files (crashes 'npm start')
          make-backup-files nil))
#+END_SRC
** Automatically refreshes the buffer for changes outside of Emacs
Auto refreshes every 2 seconds. Don't forget to refresh the version
control status as well.
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (global-auto-revert-mode +1)
    (setq auto-revert-interval 2
          auto-revert-check-vc-info t
          global-auto-revert-non-file-buffers t
          auto-revert-verbose nil))
#+END_SRC
** Eldoc: documentation in the mini-buffer
Slightly shorten eldoc display delay.
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :ensure nil
    :diminish eldoc-mode
    :config
    (setq eldoc-idle-delay 0.4))
#+END_SRC
** Mouse wheel (track-pad) scroll speed
By default, the scrolling is way too fast to be precise and helpful,
let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
  (use-package mwheel
    :ensure nil
    :config (setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
                  mouse-wheel-progressive-speed nil))
#+END_SRC
** Show matching parentheses
Reduce the highlight delay to instantly.
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :ensure nil
    :init (setq show-paren-delay 0)
    :config (show-paren-mode +1))
#+END_SRC
** Setting up some frame defaults
Maximize the frame by default on start-up. Set the font to size 12.
#+BEGIN_SRC emacs-lisp
  (use-package frame
    :preface
    (defun ehackable/set-default-font ()
      (interactive)
      (set-face-attribute 'default nil :family "Fira Code")
      (set-face-attribute 'default nil
                          :height 130
                          :weight 'normal))
    :ensure nil
    :config
    ;; (setq initial-frame-alist '((fullscreen . maximized)))
    (ehackable/set-default-font))
#+END_SRC
** Ediff tweaks
Enter ediff with side-by-side buffers to better compare the
differences.
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :ensure nil
    :config
    (setq ediff-window-setup-function #'ediff-setup-windows-plain)
    (setq ediff-split-window-function #'split-window-horizontally))
#+END_SRC
** Auto-pairing quotes and parentheses etc.
#+BEGIN_SRC emacs-lisp
  (use-package elec-pair
    :ensure nil

    :config
    (defvar ehackable/elec-pairs '((?/ . ?/) (?= . ?=) (?* . ?*)))

    (defun ehackable/add-elec-pairs-org-mode ()
      "Toggle auto-insert for specific symbols in Org mode"
      (setq-local electric-pair-pairs (append electric-pair-pairs ehackable/elec-pairs))
      (setq-local electric-pair-text-pairs ehackable/elec-pairs))

    :hook
    (prog-mode . electric-pair-mode)
    (org-mode  . ehackable/add-elec-pairs-org-mode))

#+END_SRC
** Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook (before-save . whitespace-cleanup))
#+END_SRC
** Dired tweaks
Delete intermediate buffers when navigating through dired.
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :config
    (setq delete-by-moving-to-trash t)
    (eval-after-load "dired"
      #'(lambda ()
          (put 'dired-find-alternate-file 'disabled nil)
          (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
#+end_src
** Dump custom-set-variables to a garbage file and don't load it
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :ensure nil
    :config
    (setq custom-file (concat user-emacs-directory "to-be-dumped.el")))
#+END_SRC

** Tweak Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure nil
    :config
    (treemacs-load-all-the-icons-with-workaround-font "Hermit")
    (setq treemacs-width 26)
    :bind (:map treemacs-mode-map
                ("<down>" . (lambda (&optional arg) (interactive)
                              (next-line arg)
                              (save-selected-window (treemacs-RET-action))))
                ("<up>"   . (lambda (&optional arg) (interactive)
                              (previous-line arg)
                              (save-selected-window (treemacs-RET-action))))))

#+END_SRC

* Third-party packages
** GUI enhancements
*** Color Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :init (load-theme 'doom-tokyo-night t))
  ;; (add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes/"))
  ;; (load-theme 'wilmersdorf t) ; an orginal theme created by me.
#+END_SRC
*** Emacs Dashboard
#+BEGIN_SRC emacs-lisp

  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title
          "We are what we repeatedly do. Excellence then, is not an act, but a habit.

                            Fortune favors the bold !" )
    (setq dashboard-startup-banner "~/.emacs.d/emacs-dragon-icon.png")
    (setq dashboard-icon-type 'all-the-icons)
    ;; (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-items '((bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)))

    (setq dashboard-match-agenda-entry
          "TODO=\"TODO\"|TODO=\"IN-PROGRESS\"|TODO=\"DRAFT\"|TODO=\"WAITING\"")
    )
#+END_SRC

*** Syntax highlighting
Lightweight syntax highlighting improvement for numbers and escape
sequences (e.g. ~\n, \t~).
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))

  (use-package highlight-escape-sequences
    :hook (prog-mode . hes-mode))
#+END_SRC
** Customize Minibuffer UI
*** Marginalia
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :custom
    (marginalia-max-relative-age 0) ;; Don't show relative age
    (marginalia-align 'right) ;; align to right
    :init
    (marginalia-mode))
#+END_SRC

[[https://github.com/minad/marginalia][marginalia]] adds marks and annotations to the minibuffer completions

*** All-the-icons-completion
[[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]] adds icons to completion candidates using the built in completion metadata functions.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))

  ;; Instal fonts i.e M-x  all-the-icons-install-fonts

  (use-package all-the-icons-completion
    :if (display-graphic-p)
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))

#+END_SRC

*** Vertico
[[https://github.com/minad/vertico][Vertico]] provides a performant and minimalistic vertical completion UI based on the default completion system.

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :custom
    (vertico-cycle t)  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (vertico-resize t) ;; Grow and shrink the Vertico minibuffer

    :init
    (vertico-mode))

  (use-package vertico-directory
    :after vertico
    :ensure nil

    ;; More convenient directory navigation commands
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))


  ;; Persist history over Ema restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  #+END_SRC

*** Orderless
[[https://github.com/oantolin/orderless][Orderless]] provides completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order.

#+BEGIN_SRC emacs-lisp

  (use-package orderless
    :custom
    (completion-styles '(orderless))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

*** Ido, ido-vertical, ido-ubiquitous and fuzzy matching
Selecting buffers/files with great efficiency. In my opinion, Ido is
enough to replace Ivy/Counsel and Helm. We install ido-vertical to get
a better view of the available options (use ~C-n~, ~C-p~ or arrow keys
to navigate). Ido-ubiquitous (from the ~ido-completing-read+~ package)
provides us ido-like completions in describing functions and variables
etc. Fuzzy matching is a nice feature and we have flx-ido for that
purpose.

#+BEGIN_SRC emacs-lisp
  ;; (use-package ido
  ;;   :config
  ;;   (ido-mode +1)
  ;;   (setq ido-everywhere t
  ;;         ido-enable-flex-matching t))

  ;; (use-package ido-vertical-mode
  ;;   :config
  ;;   (ido-vertical-mode +1)
  ;;   (setq ido-vertical-define-keys 'C-n-C-p-up-and-down))

  ;; (use-package ido-completing-read+
  ;;   :config (ido-ubiquitous-mode +1))

  ;; (use-package flx-ido
  ;;   :config (flx-ido-mode +1))

#+END_SRC

* Programming language support and Utilities
** IDE Features with LSP
*** lsp-mode
We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands
    (lsp lsp-deferred)

    :init
    (setq lsp-keymap-prefix "C-c l")

    :bind
    (:map lsp-mode-map ("<tab>" . company-indent-or-complete-common))

    :config
    (lsp-enable-which-key-integration t)
    (setq lsp-headerline-breadcrumb-enable nil))
  ;; (setq lsp-diagnostics-disabled-modes '(python-mode))
#+END_SRC

*** lsp-ui
[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

*** lsp-treemacs
[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after (lsp treemacs))

#+end_src

*** lsp-ivy
[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :bind ("M-t" . lsp-ivy-workspace-symbol))

#+end_src

** Languages
*** C/C++
#+BEGIN_SRC emacs-lisp
  ;; C, C++, and Java
  (use-package cc-vars
    :ensure nil
    :config
    (setq-default indent-tabs-mode nil)
    (c-set-offset 'case-label '+)
    (setq-default c-basic-offset ehackable/indent-width)
    (setq c-default-style '((java-mode . "java")
                            (awk-mode . "awk")
                            (other . "k&r"))))
  (add-hook 'c-mode-hook #'lsp-deferred)
  (add-hook 'c++-mode-hook #'lsp-deferred)
#+END_SRC

*** Python
#+BEGIN_SRC emacs-lisp
  (use-package lsp-pyright)

  (use-package python
    :ensure nil
    :hook (python-mode . lsp-deferred)
    :config
    (setq python-indent-offset ehackable/indent-width))

  (use-package pyvenv
    :hook (python-mode . pyvenv-mode)

    :init
    (setenv "WORKON_HOME" "~/.local/share/virtualenvs/")

    :config
    (setq pyvenv-post-activate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3"))
                  (call-interactively #'lsp-workspace-restart))))
    (setq pyvenv-post-deactivate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter "python3")
                  (call-interactively #'lsp-workspace-restart))))
    )
#+END_SRC

*** Shell
#+BEGIN_SRC emacs-lisp
  (add-hook 'sh-mode-hook #'lsp-deferred)
#+END_SRC

*** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :hook (markdown-mode . visual-line-mode))
#+END_SRC

*** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    ;; :hook (yaml-mode . lsp-deferred)
    )

#+END_SRC

*** JSON
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    ;; :hook (json-mode . lsp-deferred)
    )

#+END_SRC

*** Dockerfile
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :hook (docker-mode . lsp-deferred))
#+END_SRC

*** Jenkinsfile
#+BEGIN_SRC emacs-lisp
  (use-package jenkinsfile-mode)
#+END_SRC

*** Terraform
#+BEGIN_SRC emacs-lisp

  (use-package terraform-mode
    :custom
    (terraform-indent-level 2)

    :hook
    (terraform-mode . lsp-deferred)
    )

  (use-package terraform-doc)

#+END_SRC

** In-buffer Completion
[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp
  (use-package company
    :init
    (global-company-mode)
    :bind
    (:map company-active-map ("<tab>" . company-complete-selection))

    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode)
    :diminish company-box-mode)

#+end_src

** Syntax Checking
A modern on-the-fly syntax checking extension -- absolute essential
#+BEGIN_SRC emacs-lisp
  (use-package flycheck    ;; (Needs ispell installed)
    :config
    (global-flycheck-mode +1)

    :hook
    ;; For Python, use following backends:
    ;; Flake8, pylint (Error/style linting).
    ;; myPy (type checking)
    (python-mode . (lambda ()
                     (setq flycheck-checker 'python-flake8)
                     ;; (setq flycheck-flake8-config-file "~/myWorkflow/config/mypy.ini")
                     ;; (setq flycheck-pylint-config-file "~/myWorkflow/config/mypy.ini")
                     (setq flycheck-python-mypy-config "~/myWorkflow/config/mypy.ini")
                     (flycheck-add-next-checker 'python-flake8 '(warning . python-pylint))))
    )

#+END_SRC

** Gtags
[[https://github.com/namhyung/global/blob/master/gtags.el][gtags]] is an Emacs front-end to GNU Global.

#+BEGIN_SRC emacs-lisp
  ;; (use-package gtags
  ;;   :ensure nil
  ;;   ;; :straight (:host github :repo "namhyung/global" :files ("gtags.el"))
  ;;   :load-path "~/.emacs.d/elpa/gtags.el"
  ;;   :bind (("M-t" . gtags-find-tag)
  ;;          ("M-r" . gtags-find-rtag)
  ;;          ("M-s" . gtags-find-symbol)
  ;;          ("M-f" . gtags-find-file)
  ;;          ("C-t" . gtags-pop-stack)))
#+END_SRC

** Terminal Emulator
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    ;; Unset keybindings used by windmove
    :bind (:map vterm-mode-map
                ("M-<right>" . nil)
                ("M-<left>" . nil)
                ("M-<up>" . nil)
                ("M-<down>" . nil)))
#+END_SRC

* Project Management
** Version Control
[[https://magit.vc/manual/magit/][Magit]]
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC

** Project Managemet
[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/rootfs/sources")
      (setq projectile-project-search-path '("~/rootfs/sources")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src

* Personal Knowledge Management
** Org Mode
- Tweak Org mode config
- Beautifly Org headings.
- [[https://github.com/org-roam/org-roam][OrgRoam]] for non-hierarchical Notes taking, based on the Zettelkasten method.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook ((org-mode . visual-line-mode)
           (org-mode . org-indent-mode))

    :custom
    (org-todo-keywords
     '((sequence "TODO(t)" "IN-PROGRESS(i)" "DRAFT(d)" "WAITING(w)" "|" "DONE(D)" "CANCELLED(C)")))

    (org-agenda-files '("~/myWorkflow/org/roam/"))

    (org-capture-templates
     '(("i" "Inbox" entry
        (file+headline "~/myWorkflow/org/roam/inbox.org" "What's On Your Mind?")
        "**** DRAFT %?\n%t"
        :empty-lines-before 1)
       ("t" "Tasks" entry
        (file+headline "~/myWorkflow/org/roam/tasks.org" "To Be Scheduled:")
        "\n\n** TODO %?\nSCHEDULED: <%(org-read-date nil nil \"+1d\")>"
        :empty-lines-after 1)
       ("m" "Meetings" entry
        (file+headline "~/myWorkflow/org/roam/meetings.org" "Meetings")
        "\n\n** Meeting %?\nSCHEDULED: <%(org-read-date nil nil \"+1d\")>"
        :empty-lines-after 1)))

    (org-startup-with-inline-images t)
    (org-hide-block-startup t)

    :bind (("C-c a"   . org-agenda)
           ("C-c n c" . org-capture)))

  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)

    :custom
    (org-roam-directory "~/myWorkflow/org/roam/")
    (org-roam-completion-everywhere t)

    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-setup))


  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+END_SRC

* Miscellaneous
** Diminish minor modes
The diminish package is used to hide unimportant minor modes in the
modeline. It provides the ~:diminish~ keyword we've been using in
other use-package declarations.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand t)
#+END_SRC

** Which-key
Provides us with hints on available keystroke combinations.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))
#+END_SRC

** Configure PATH on macOS
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config (when (memq window-system '(mac ns x))
              (exec-path-from-shell-initialize)))
#+END_SRC

* AI Coding Assistant
